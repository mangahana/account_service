// Code generated by MockGen. DO NOT EDIT.
// Source: ./code.go
//
// Generated by this command:
//
//	mockgen -source ./code.go -destination ./mock/mock.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	domain "account/internal/domain"
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// FindLatestByIP mocks base method.
func (m *MockRepository) FindLatestByIP(c context.Context, ip string, timestamp time.Time) ([]domain.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLatestByIP", c, ip, timestamp)
	ret0, _ := ret[0].([]domain.Code)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLatestByIP indicates an expected call of FindLatestByIP.
func (mr *MockRepositoryMockRecorder) FindLatestByIP(c, ip, timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLatestByIP", reflect.TypeOf((*MockRepository)(nil).FindLatestByIP), c, ip, timestamp)
}

// FindOneByCredentials mocks base method.
func (m *MockRepository) FindOneByCredentials(c context.Context, phone, code string) (*domain.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByCredentials", c, phone, code)
	ret0, _ := ret[0].(*domain.Code)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByCredentials indicates an expected call of FindOneByCredentials.
func (mr *MockRepositoryMockRecorder) FindOneByCredentials(c, phone, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByCredentials", reflect.TypeOf((*MockRepository)(nil).FindOneByCredentials), c, phone, code)
}

// FindOneByPhoneAndIP mocks base method.
func (m *MockRepository) FindOneByPhoneAndIP(c context.Context, phone, ip string) (*domain.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByPhoneAndIP", c, phone, ip)
	ret0, _ := ret[0].(*domain.Code)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByPhoneAndIP indicates an expected call of FindOneByPhoneAndIP.
func (mr *MockRepositoryMockRecorder) FindOneByPhoneAndIP(c, phone, ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByPhoneAndIP", reflect.TypeOf((*MockRepository)(nil).FindOneByPhoneAndIP), c, phone, ip)
}

// RemoveAll mocks base method.
func (m *MockRepository) RemoveAll(c context.Context, phone string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll", c, phone)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll.
func (mr *MockRepositoryMockRecorder) RemoveAll(c, phone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockRepository)(nil).RemoveAll), c, phone)
}

// Save mocks base method.
func (m *MockRepository) Save(c context.Context, code *domain.Code) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", c, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRepositoryMockRecorder) Save(c, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepository)(nil).Save), c, code)
}
