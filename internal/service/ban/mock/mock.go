// Code generated by MockGen. DO NOT EDIT.
// Source: ./ban.go
//
// Generated by this command:
//
//	mockgen -source ./ban.go -destination ./mock/mock.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	domain "account/internal/domain"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(c context.Context, ban *domain.Ban) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c, ban)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(c, ban any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), c, ban)
}

// CreateUnban mocks base method.
func (m *MockRepository) CreateUnban(c context.Context, banId, userId int, reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUnban", c, banId, userId, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUnban indicates an expected call of CreateUnban.
func (mr *MockRepositoryMockRecorder) CreateUnban(c, banId, userId, reason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUnban", reflect.TypeOf((*MockRepository)(nil).CreateUnban), c, banId, userId, reason)
}

// FindOneByID mocks base method.
func (m *MockRepository) FindOneByID(c context.Context, id int) (*domain.Ban, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByID", c, id)
	ret0, _ := ret[0].(*domain.Ban)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByID indicates an expected call of FindOneByID.
func (mr *MockRepositoryMockRecorder) FindOneByID(c, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByID", reflect.TypeOf((*MockRepository)(nil).FindOneByID), c, id)
}

// GetActiveBansCount mocks base method.
func (m *MockRepository) GetActiveBansCount(c context.Context, userId int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveBansCount", c, userId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveBansCount indicates an expected call of GetActiveBansCount.
func (mr *MockRepositoryMockRecorder) GetActiveBansCount(c, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveBansCount", reflect.TypeOf((*MockRepository)(nil).GetActiveBansCount), c, userId)
}

// Save mocks base method.
func (m *MockRepository) Save(c context.Context, ban *domain.Ban) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", c, ban)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRepositoryMockRecorder) Save(c, ban any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepository)(nil).Save), c, ban)
}
